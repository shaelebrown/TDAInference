% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distance_and_loss.R
\name{diagram_distance}
\alias{diagram_distance}
\title{Calculate distances between pairs of persistence diagrams}
\usage{
diagram_distance(D1, D2, dim, p, distance)
}
\arguments{
\item{D1}{first persistence diagram, either computed from TDA or converted to a data frame}

\item{D2}{second persistence diagram, either computed from TDA or converted to a data frame}

\item{dim}{homological dimension in which the distance is to be computed}

\item{p}{matching distance parameter}

\item{distance}{string which determines which type of distance calculation to carry out}
}
\value{
numeric value of the distance calculation
}
\description{
Calculates the distance between a pair of persistce diagrams, stored as
data frames (as the output from diagram_to_df)
in a particular homological dimension. Different TDA sources define distances
differently, and this function has functionality to compute distances like
in the R package TDA (based on the C++ library Dionysus, see
<https://mrzv.org/software/dionysus2/>) or like in the
original paper for inference of persistence diagrams by Robinson and Turner in 2017
<https://link.springer.com/article/10.1007/s41468-017-0008-7>.
}
\details{
The `D1` and `D2` parameters should be persistence diagrams, outputted
from a homology calculation in the package TDA, or such a
persistence diagram converted to a data frame via the function diagram_to_df.
The `dim` parameter should be a positive finite integer.
The `p` parameter should be a positive integer or Inf. The `distance` parameter
should be a string, either "wasserstein" or "Turner".
}
\examples{

# create two diagrams with package TDA based on 2D Gaussians
diag1 <- TDA::ripsDiag(data.frame(x = rnorm(100,mean = 0,sd = 1),y = rnorm(100,mean = 0,sd = 1)),maxscale = 1,maxdimension = 1)
diag2 <- TDA::ripsDiag(data.frame(x = rnorm(100,mean = 0,sd = 1),y = rnorm(100,mean = 0,sd = 1)),maxscale = 1,maxdimension = 1)

# calculate their wasserstein distance
wass <- diagram_distance(D1 = diag1,D2 = diag2,dim = 1,p = 2,distance = "wasserstein")

# calculate their bottleneck distance
bottleneck <- diagram_distance(D1 = diag2,D2 = diag2,dim = 1,p = Inf,distance = "wasserstein")

# repeat wasserstein calculation but with diagrams converted to data frames
diag1_df <- diagram_to_df(d = diag1)
diag2_df <- diagram_to_df(d = diag2)
wass_df <- diagram_distance(D1 = diag1_df,D2 = diag2_df,dim = 1,p = 2,distance = "wasserstein")
}
