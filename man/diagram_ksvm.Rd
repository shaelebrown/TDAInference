% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/machine_learning.R
\name{diagram_ksvm}
\alias{diagram_ksvm}
\title{Fit a support vector machine model where the training set is a list of persistence diagrams}
\usage{
diagram_ksvm(
  diagrams,
  cv = 1,
  dim,
  t = 1,
  sigma = 1,
  y,
  type = NULL,
  C = 1,
  nu = 0.2,
  epsilon = 0.1,
  prob.model = F,
  class.weights = NULL,
  fit = T,
  cache = 40,
  tol = 0.001,
  shrinking = T,
  num_workers = parallelly::availableCores(omit = 1)
)
}
\arguments{
\item{diagrams}{a list of persistence diagrams, as the output of a TDA calculation.}

\item{cv}{a positive number at most the length of `diagrams` which determines the number of cross validation splits to be performed (default 1, aka no cross-validation).}

\item{dim}{the homological dimension in which the distance is to be computed.}

\item{t}{the positive scale for the persistence Fisher kernel, default 1.}

\item{sigma}{a positive number representing the bandwith for the Fisher information metric, default 1}

\item{y}{a response vector with one label for each persistence diagram.}

\item{type}{type of task to be performed.}

\item{C}{cost of contraints violation (default 1) this is the 'C'-constant of the regularization term in the Lagrange formulation.}

\item{nu}{parameter needed for nu-svc, one-svc and nu-svr. The `nu` parameter sets the upper bound on the training error and the lower bound on the fraction of data points to become Support Vector (default 0.2).}

\item{epsilon}{epsilon in the insensitive-loss function used for eps-svr, nu-svr and eps-bsvm (default 0.1).}

\item{prob.model}{if set to TRUE builds a model for calculating class probabilities or in case of regression, calculates the scaling parameter of the Laplacian distribution fitted on the residuals. Fitting is done on output data created by performing a 3-fold cross-validation on the training data. For details see references (default FALSE).}

\item{class.weights}{a named vector of weights for the different classes, used for asymmetric class sizes. Not all factor levels have to be supplied (default weight: 1). All components have to be named.}

\item{fit}{indicates whether the fitted values should be computed and included in the model or not (default TRUE).}

\item{cache}{cache memory in MB (default 40).}

\item{tol}{tolerance of termination criteria (default 0.001).}

\item{shrinking}{option whether to use the shrinking-heuristics (default TRUE).}

\item{num_workers}{the number of cores used for parallel computation, default is one less the number of cores on the machine.}
}
\value{
a list containing 

\describe{

\item{models}{the cross-validation results - a matrix storing the parameters for each model in the tuning grid and its mean cross-validation error over all split.}

\item{best_model}{the output of \code{\link[kernlab]{ksvm}} run on the whole dataset with the optimal model parameters found during cross-validation. See the help page for \code{\link[kernlab]{ksvm}} for more details about this object.}

\item{diagrams}{the diagrams which were support vectors in the best_model. These are used for downstream prediction.}

\item{dim}{the input `dim` argument.}

\item{t}{the input `t` argument.}

\item{sigma}{the input `sigma` argument.}

}
}
\description{
Returns the output of ksvm on the Gram matrix of a group of persistence diagrams
in a particular dimension. Cross validation is carried out in parallel, using a trick
noted in \url{https://doi.org/10.1007/s41468-017-0008-7}.
}
\details{
The `diagrams` parameter should be a list of persistence diagrams computed from a TDA calculation like \code{\link[TDA]{ripsDiag}} or \code{\link{diagram_to_df}}.
The `dim` parameter should be a positive finite integer.
The `sigma` and `t` parameters are the positive bandwith for the Fisher information metric and
the positive scale for the persistence Fisher kernel respectively.
`type`, `C`, `nu`, `epsilon`, `prob.model`, `class.weights`, `cross`, `fit`, `cache`, `tol`, and `shrinking` 
are additional parameters to the ksvm kernlab function. `num_workers` is the
number of cores used for parallel computation.
}
\examples{

# create thirty diagrams based on three base diagrams
g <- generate_TDAML_test_data(10,10,10)

# create response vector
y <- as.factor(rep(c("D1","D2","D3"),each = 10))

# fit model with cross validation
model_svm <- diagram_ksvm(diagrams = g,cv = 2,dim = c(0),
                          y = y,sigma = c(1,0.1),t = c(1,2),
                          num_workers = 2)
}
\seealso{
\code{\link{predict_diagram_ksvm}} for predicting labels of new diagrams.
}
\author{
Shael Brown - \email{shaelebrown@gmail.com}
}
