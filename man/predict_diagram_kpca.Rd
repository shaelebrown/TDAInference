% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/machine_learning.R
\name{predict_diagram_kpca}
\alias{predict_diagram_kpca}
\title{Predict the kernel PCA embedding of new persistence diagrams using a precomputed diagram_kpca object}
\usage{
predict_diagram_kpca(new_diagrams, embedding)
}
\arguments{
\item{new_diagrams}{a list of persistence diagrams, as the output of a TDA calculation like ripsDiag or \code{\link{diagram_to_df}}.}

\item{embedding}{the output to a diagram_kpca function call.}
}
\value{
the data projection.
}
\description{
Returns the embedding matrix for the new points.
}
\details{
The `new_diagrams` parameter should be a list of persistence diagrams computed from a TDA calculation like ripsDiag
or \code{\link{diagram_to_df}}.
The `embedding` parameter is the diagram_kpca embedding object to be used for embedding
the new diagrams.
}
\examples{

# create ten diagrams with package TDA based on 2D Gaussians
g <- lapply(X = 1:10,FUN = function(X){

diag <- TDA::ripsDiag(data.frame(x = rnorm(100,mean = 0,sd = 1),
y = rnorm(100,mean = 0,sd = 1)),
maxscale = 1,
maxdimension = 1)
df <- diagram_to_df(d = diag)
return(df)

})

# calculate their 2D PCA embedding in dimension 1 with sigma = t = 2
embedding <- diagram_kpca(diagrams = g,dim = 1,t = 2,sigma = 2,features = 2)

# create ten new diagrams with package TDA based on 2D Gaussians
g_new <- lapply(X = 1:10,FUN = function(X){

diag <- TDA::ripsDiag(data.frame(x = rnorm(100,mean = 0,sd = 1),
y = rnorm(100,mean = 0,sd = 1)),
maxscale = 1,
maxdimension = 1)
df <- diagram_to_df(d = diag)
return(df)

})

# calculate their 2D PCA embedding using the embedding object
embedding_new <- predict_diagram_kpca(new_diagrams = g_new,embedding = embedding)
}
