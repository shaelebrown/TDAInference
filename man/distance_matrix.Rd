% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distance_calculations.R
\name{distance_matrix}
\alias{distance_matrix}
\title{Calculate the distance matrix d for a list of persistence diagrams, i.e. d[i,j] = d(D[i],D[j]), in parallel.}
\usage{
distance_matrix(
  diagrams,
  other_diagrams = NULL,
  dim = 0,
  distance = "wasserstein",
  p = 2,
  sigma = NULL
)
}
\arguments{
\item{diagrams}{the list of persistence diagrams, either the output from TDA calculations or the diagram_to_df function.}

\item{other_diagrams}{either NULL (default) or another list of persistence diagrams to compute a cross-distance matrix.}

\item{dim}{the homological dimension in which the distance is to be computed.}

\item{distance}{a character determining which metric to use, either "wasserstein" (default) or "fisher".}

\item{p}{the positive wasserstein power, default 2.}

\item{sigma}{a positive number representing the bandwith of the Fisher information metric, default NULL.}
}
\value{
the distance matrix.
}
\description{
Returns the distance matrix for a list of persistence diagrams.
}
\details{
`diagrams` is the list of persistence diagrams.
The `dim` parameter should be a positive finite integer.
The `distance` parameter is the string determining which distance metric to use, `p` is the 
wasserstein power parameter, and
`t` is the positive scale parameter for the persistence Fisher kernel.
}
\examples{

# create ten diagrams with package TDA based on 2D Gaussians
g <- lapply(X = 1:10,FUN = function(X){

diag <- TDA::ripsDiag(data.frame(x = rnorm(100,mean = 0,sd = 1),
y = rnorm(100,mean = 0,sd = 1)),
maxscale = 1,
maxdimension = 1)
df <- diagram_to_df(d = diag)
return(df)

})

# calculate their distance matrix in dimension 1 with the 2-wasserstein metric
D <- distance_matrix(diagrams = g,dim = 1,distance = "wasserstein",p = 2)

# now do the cross distance matrix, should be the same as the original
D_cross <- distance_matrix(diagrams = g,other_diagrams = g,dim = 1,distance = "wasserstein",p = 2)
}
