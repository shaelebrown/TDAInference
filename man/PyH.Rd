% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/python_functions.R
\name{PyH}
\alias{PyH}
\title{Fast persistent homology calculations with python.}
\usage{
PyH(
  X,
  maxdim = 1,
  thresh,
  distance_mat = FALSE,
  ripser,
  ignore_infinite_clusters = TRUE
)
}
\arguments{
\item{X}{either a matrix or dataframe, representing either point cloud data or a distance matrix. In either case there
must be at least two rows and 1 column.}

\item{maxdim}{the non-negative integer maximum dimension for persistent homology, default 1.}

\item{thresh}{the non-negative numeric radius threshold for the Vietoris-Rips filtration.}

\item{distance_mat}{a boolean representing whether the input X is a distance matrix or not, default FALSE.}

\item{ripser}{the ripser python module.}

\item{ignore_infinite_clusters}{a boolean representing whether to remove clusters (0 dimensional cycles) which
die at the threshold value. Default is TRUE as this is the default for TDAstats homology calculations, but can be set to
FALSE which is the default for python ripser.}
}
\description{
This function is a wrapper of the python wrapper of the ripser engine, but is still faster than using the
R package TDAstats (see the TDApplied package vignette for details).
}
\details{
If `distance_mat` is `TRUE` then `X` must be a square matrix. The `ripser` parameter should be the
result of an `import_ripser` function call, but since that function is slow the ripser object should
be explicitly created before a PyH function call (see examples).
}
\examples{

# set up python for fast PH
PyH_setup()

# create sample data
df <- data.frame(x = 1:10,y = 1:10)

# import the ripser module
ripser <- import_ripser()

# calculate persistent homology up to dimension 1 with a maximum
# radius of 5
phom <- PyH(X = df,thresh = 5,ripser = ripser)
}
\author{
Shael Brown - \email{shaelebrown@gmail.com}
}
